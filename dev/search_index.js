var documenterSearchIndex = {"docs":
[{"location":"examples/example/","page":"-","title":"-","text":"EditURL = \"https://github.com/sandimas/SynthAC.jl/blob/main/docs/src/examples/example.jl\"","category":"page"},{"location":"examples/example/","page":"-","title":"-","text":"Example script","category":"page"},{"location":"examples/example/","page":"-","title":"-","text":"Usage:","category":"page"},{"location":"examples/example/","page":"-","title":"-","text":"$ julia example.jl","category":"page"},{"location":"examples/example/","page":"-","title":"-","text":"Here we will use the two built in distributions and a a user defined anonymous function  to create a fermionic distribution. Then we will use two Gaussians (Normal) for a bosonic distribution.","category":"page"},{"location":"examples/example/","page":"-","title":"-","text":"# Use SynthAC pacakge\nusing SynthAC","category":"page"},{"location":"examples/example/","page":"-","title":"-","text":"Create an empty array to add distributions","category":"page"},{"location":"examples/example/","page":"-","title":"-","text":"distributions = []","category":"page"},{"location":"examples/example/","page":"-","title":"-","text":"Create superposition of distributions.","category":"page"},{"location":"examples/example/","page":"-","title":"-","text":"AppendDistribution!(distributions,Normal(-1.2,0.5,A=1.2))\nAppendDistribution!(distributions,Cauchy(1.0,0.25,A=0.5))\nAppendDistribution!(distributions,x -> min(1.0, 5.0 / (x-3.0)^2) )\n\n# Set the parameter for the range we will integrate over. Unfortunately, to allow user generated distributions the range of (-∞,∞) was not possible\nMaxω = 10.0","category":"page"},{"location":"examples/example/","page":"-","title":"-","text":"Generate noisy correlation functions and return a dictionary.","category":"page"},{"location":"examples/example/","page":"-","title":"-","text":"Noise is generated using formula A3:","category":"page"},{"location":"examples/example/","page":"-","title":"-","text":"beginalign*\nG_i=  leftbarG+sigma_iright\nsigma_j^0=  textNormalRandleft(mu=0sigma=sigma_0right)\nsigma_i=  fracsum_jsigma_j^0e^-lefttau_i-tau_jrightxisqrtsum_je^-2lefttau_i-tau_jrightxi\nendalign*","category":"page"},{"location":"examples/example/","page":"-","title":"-","text":"Parameters fed in distributions: array of distribution functions 10.0: β 0.05: Δτ true: fermionic outfile=\"\": do not save the dictionary to a file Nbins=50: Number of bins of noisy data to create AutoCorrelationTime=0.4: Autocorrelation parameter ξ","category":"page"},{"location":"examples/example/","page":"-","title":"-","text":"Note: fermionic distributions will always normalize to 1.0","category":"page"},{"location":"examples/example/","page":"-","title":"-","text":"dict_data = GenerateCorrelationFunctions(distributions,10.0,0.05,true;outfile=\"\",NBins=50,AutoCorrelationTime=0.4,σ0=0.005,Maxω=Maxω)","category":"page"},{"location":"examples/example/","page":"-","title":"-","text":"Example outputs","category":"page"},{"location":"examples/example/","page":"-","title":"-","text":"# Distribution generating function.\nA = dict_data[\"A\"]\n# τs from 0.0 to β\nτs = dict_data[\"τs\"]\n# β at which the data was generated\nβ = dict_data[\"β\"]\n# ξ used to generate noisy data\nAutoCorrelationTime = dict_data[\"ξ\"]\n# σ0 which is fed into the Gaussian random\nσ0 = dict_data[\"σ0\"]\n# Binned noisy correlation function of shape [nτ,Nbins]\nG_bins = dict_data[\"Gτ\"]\n# Noiseless correlation function of shape [nτ]\nG_calc = dict_data[\"Gτ_calc\"]","category":"page"},{"location":"examples/example/","page":"-","title":"-","text":"Calling the distribution function to plot using your favorte plotting software","category":"page"},{"location":"examples/example/","page":"-","title":"-","text":"ωs = LinRange(-Maxω,Maxω,200)","category":"page"},{"location":"examples/example/","page":"-","title":"-","text":"Set up distributions for bosons","category":"page"},{"location":"examples/example/","page":"-","title":"-","text":"distributions_b = []\nAppendDistribution!(distributions_b,Normal(-1.2,0.5,A=1.2))\nAppendDistribution!(distributions_b,Normal(4.2,0.5,A=0.5))","category":"page"},{"location":"examples/example/","page":"-","title":"-","text":"Generate the noisy correlation functions for bosons","category":"page"},{"location":"examples/example/","page":"-","title":"-","text":"Unlike the fermionic cade we require a symmetry such that A is odd in ω. We do this for you by taking the distribution you enter, enforcing evenness, then multiplying by ω: distribution(ω) = ω * (distribution_in(ω)+distribution_in(-ω))","category":"page"},{"location":"examples/example/","page":"-","title":"-","text":"We call GenerateCorrelationFunctions the same way","category":"page"},{"location":"examples/example/","page":"-","title":"-","text":"dict_data_boson = GenerateCorrelationFunctions(distributions,10.0,0.05,false)\n# And your process/plot from here out as you'd like.","category":"page"},{"location":"examples/example/","page":"-","title":"-","text":"","category":"page"},{"location":"examples/example/","page":"-","title":"-","text":"This page was generated using Literate.jl.","category":"page"},{"location":"#About-the-Package","page":"Home","title":"About the Package","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"This package allows a user to generate noisy correlation functions from real axis distributions. The noise is correlated using the technique developed by Hui Shao et al PhysRevX.7.041072","category":"page"},{"location":"#API","page":"Home","title":"API","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"GenerateCorrelationFunctions\nAppendDistribution!","category":"page"},{"location":"","page":"Home","title":"Home","text":"GenerateCorrelationFunctions","category":"page"},{"location":"#SynthAC.GenerateCorrelationFunctions","page":"Home","title":"SynthAC.GenerateCorrelationFunctions","text":"GenerateCorrelationFunctions(DistributionArray,β,Δτ,fermionic;\n                             outfile=\"\",NBins=100,AutoCorrelationTime=0.5,\n                             σ0=0.005,Maxω=10.0)\n\nGenerates synthetic correlation functions from the passed in functions in the distribution array.  This generates bins of data with correlated errors using the method developed by  Hui Shao, Yan Qi Qin, Sylvain Capponi, Stefano Chesi, Zi Yang Meng, and Anders W. Sandvik (PHYSICAL REVIEW X 7, 041072 (2017))\n\nArguments\n\nDistributionArray: Array of Anonymous Functions\nβ: Inverse Temperature\nΔτ: Timestep in imaginary time\nfermionic: Boolean, true if using fermionic kernel\n\nOptinal Arguments\n\noutfile: file to save dictionary to. .jld2 format is recommended. \"\" for no output file \nNBins: Number of bins of noisy correlation functions to generate\nAutoCorrelationTime: Auto correlation length in imaginary time\nσ0: Tuneable parameter to increase/decrease variance in correlation functions\nMaxω: range to integrate over. (-∞,∞) is not yet supported, and exponential values in kernels limit range possible \nNωn: Number of Matsubara frequency points\nBlurtype: Either \"gamma\" or \"absgauss\". \"gamma\" uses a gamma distribution which does not go below zero. \"absgauss\" uses a normal distribution and takes the absolute value \n\nReturns\n\nDict{String,Any}(...) containing the keys\n\n\"A\": True distribution\n`\"ωs\": Grid of ω values for A\n\"β\": Inverse temperature\n\"τs\": Imaginary time grid\n\"ωns\": Matsubara frequency grid\n\"ξ\": Autocorrelation Time\n\"σ0\": Tuneable uncorrelated standard error parameter    \n\"Gτ\": Array of dimensions [NBins,size(τs,1)]\n\"Gτ_calc\": Reference correlation function without noise\n\"Gωn\": Array of dimensions [NBins,size(ωns,1)]\n\"Gωn_calc\": Reference correlation function without noise\n\n\n\n\n\n","category":"function"},{"location":"","page":"Home","title":"Home","text":"AppendDistribution!","category":"page"},{"location":"#SynthAC.AppendDistribution!","page":"Home","title":"SynthAC.AppendDistribution!","text":"AppendDistribution!(DistributionArray,Distribution)\n\nAppends a new anonymous function to array of anonymous functions\n\nArguments\n\nDistributionArray: Array to append anonymous function to. May be empty array\nDistribution: Anonymous function to apped\n\n\n\n\n\n","category":"function"},{"location":"example/","page":"Examples","title":"Examples","text":"EditURL = \"<unknown>/src/examples/example.jl\"","category":"page"},{"location":"example/","page":"Examples","title":"Examples","text":"Example script","category":"page"},{"location":"example/","page":"Examples","title":"Examples","text":"Usage:","category":"page"},{"location":"example/","page":"Examples","title":"Examples","text":"$ julia example.jl","category":"page"},{"location":"example/","page":"Examples","title":"Examples","text":"Here we will use the two built in distributions and a a user defined anonymous function  to create a fermionic distribution. Then we will use two Gaussians (Normal) for a bosonic distribution.","category":"page"},{"location":"example/","page":"Examples","title":"Examples","text":"# Use SynthAC pacakge\nusing SynthAC","category":"page"},{"location":"example/","page":"Examples","title":"Examples","text":"Create an empty array to add distributions","category":"page"},{"location":"example/","page":"Examples","title":"Examples","text":"distributions = []","category":"page"},{"location":"example/","page":"Examples","title":"Examples","text":"Create superposition of distributions.","category":"page"},{"location":"example/","page":"Examples","title":"Examples","text":"AppendDistribution!(distributions,Normal(-1.2,0.5,A=1.2))\nAppendDistribution!(distributions,Cauchy(1.0,0.25,A=0.5))\nAppendDistribution!(distributions,x -> min(1.0, 5.0 / (x-3.0)^2) )\n\n# Set the parameter for the range we will integrate over. Unfortunately, to allow user generated distributions the range of (-∞,∞) was not possible\nMaxω = 10.0","category":"page"},{"location":"example/","page":"Examples","title":"Examples","text":"Generate noisy correlation functions and return a dictionary.","category":"page"},{"location":"example/","page":"Examples","title":"Examples","text":"Noise is generated using formula A3:","category":"page"},{"location":"example/","page":"Examples","title":"Examples","text":"beginalign*\nG_i=  leftbarG+sigma_iright\nsigma_j^0=  textNormalRandleft(mu=0sigma=sigma_0right)\nsigma_i=  fracsum_jsigma_j^0e^-lefttau_i-tau_jrightxisqrtsum_je^-2lefttau_i-tau_jrightxi\nendalign*","category":"page"},{"location":"example/","page":"Examples","title":"Examples","text":"Parameters fed in distributions: array of distribution functions 10.0: β 0.05: Δτ true: fermionic outfile=\"\": do not save the dictionary to a file Nbins=50: Number of bins of noisy data to create AutoCorrelationTime=0.4: Autocorrelation parameter ξ","category":"page"},{"location":"example/","page":"Examples","title":"Examples","text":"Note: fermionic distributions will always normalize to 1.0","category":"page"},{"location":"example/","page":"Examples","title":"Examples","text":"dict_data = GenerateCorrelationFunctions(distributions,10.0,0.05,true;outfile=\"\",NBins=50,AutoCorrelationTime=0.4,σ0=0.005,Maxω=Maxω)","category":"page"},{"location":"example/","page":"Examples","title":"Examples","text":"Example outputs","category":"page"},{"location":"example/","page":"Examples","title":"Examples","text":"# Distribution generating function.\nA = dict_data[\"A\"]\n# τs from 0.0 to β\nτs = dict_data[\"τs\"]\n# β at which the data was generated\nβ = dict_data[\"β\"]\n# ξ used to generate noisy data\nAutoCorrelationTime = dict_data[\"ξ\"]\n# σ0 which is fed into the Gaussian random\nσ0 = dict_data[\"σ0\"]\n# Binned noisy correlation function of shape [nτ,Nbins]\nG_bins = dict_data[\"Gτ\"]\n# Noiseless correlation function of shape [nτ]\nG_calc = dict_data[\"Gτ_calc\"]","category":"page"},{"location":"example/","page":"Examples","title":"Examples","text":"Calling the distribution function to plot using your favorte plotting software","category":"page"},{"location":"example/","page":"Examples","title":"Examples","text":"ωs = LinRange(-Maxω,Maxω,200)","category":"page"},{"location":"example/","page":"Examples","title":"Examples","text":"Set up distributions for bosons","category":"page"},{"location":"example/","page":"Examples","title":"Examples","text":"distributions_b = []\nAppendDistribution!(distributions_b,Normal(-1.2,0.5,A=1.2))\nAppendDistribution!(distributions_b,Normal(4.2,0.5,A=0.5))","category":"page"},{"location":"example/","page":"Examples","title":"Examples","text":"Generate the noisy correlation functions for bosons","category":"page"},{"location":"example/","page":"Examples","title":"Examples","text":"Unlike the fermionic cade we require a symmetry such that A is odd in ω. We do this for you by taking the distribution you enter, enforcing evenness, then multiplying by ω: distribution(ω) = ω * (distribution_in(ω)+distribution_in(-ω))","category":"page"},{"location":"example/","page":"Examples","title":"Examples","text":"We call GenerateCorrelationFunctions the same way","category":"page"},{"location":"example/","page":"Examples","title":"Examples","text":"dict_data_boson = GenerateCorrelationFunctions(distributions,10.0,0.05,false)\n# And your process/plot from here out as you'd like.","category":"page"},{"location":"example/","page":"Examples","title":"Examples","text":"","category":"page"},{"location":"example/","page":"Examples","title":"Examples","text":"This page was generated using Literate.jl.","category":"page"}]
}
